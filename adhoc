#!/bin/bash


###############################################
### AD-HOC (WPE)
###############################################

### Translations ########################
    TEXT01="choose wifi interface"
    TEXT02="Enter the ESSID Name or press ENTER to use the default"
    TEXT03="Enter the WPE Passphrase below or press ENTER to using Open Network"
    TEXT04="Password 5 or 13 ASCII characters"
    TEXT05="Start"
    TEXT06="Stop"
    TEXT07="EXIT"

case $LANG in
    zh_TW* | zh_HK*)
    TEXT01="選擇建立WIFI介面卡"
    TEXT02="輸入ESSID名稱或按ENTER鍵使用預設名稱"
    TEXT03="輸入WPE密碼或按ENTER鍵使用無密碼開放式網路"
    TEXT04="密碼5或13個ASCII字元"
    TEXT05="開始"
    TEXT06="停止"
    TEXT07="退出"
esac

###############################################
PHY0=phy0
PHYX=$(ls /sys/class/ieee80211/ | sed -e 's/phy0//g' | sed ':label;N;s/\n//;b label')

### WIFI Interface
sudo iw dev | sed -e 's/^[ \t]*//g' | sed 's/phy#/phy/g' | sed ':label;N;s/\n//;b label' | sed 's/phy0/\nphy0/' | sed 's/ifindex.*//g' | sed 's/Interface /=/g' > /tmp/iw-dev-info

WLAN0=$(cat /tmp/iw-dev-info | grep $PHY0 | sed 's/.*=//')
WLANX=$(cat /tmp/iw-dev-info | grep $PHYX | sed 's/.*=//')

Wessid=Linux-ADHOC

ShareNet=$(sudo route | grep default 2>&1 | awk '{printf "%s ", $NF}' | sed -s 's/ $//' | sed -e 's/ .*//g')
Wmode=ad-hoc
Wchannel=auto

Igateway=192.168.2.254
Inetmask=255.255.255.0
Inetwork=192.168.2.0
DhcpRangeMin=192.168.2.10
DhcpRangeMax=192.168.2.105

adhocFolder=/etc/adhoc
dnsmasqFile=$adhocFolder/dnsmasq.conf
resolvFile=/etc/resolv.conf
dnsmasqPid=/var/run/dnsmasq.pid
dnsmasqLeases=/var/run/dnsmasq.leases


###############################################
choose_interface_fun(){
if [ "$PHYX" == "" ]; then
    WInterface="$WLAN0"
else
    ### choose wifi interface
    echo -e "    $TEXT01"
    echo -e "    1) $WLAN0"
    echo -e "    2) $WLANX"
    read choose
    [[ "$choose" ]]

    if [ "$choose" == "1" ]; then
        WInterface="$WLAN0"
    else
        if [ "$choose" == "2" ]; then
            WInterface="$WLANX"
        else
            WInterface="$WLAN0"
        fi
    fi
fi

sudo sh -c "echo $WInterface > /tmp/WInterface"

}

###############################################
set_essid_fun(){
clear
echo -e ""
echo -e "    $TEXT02 ($Wessid):"
read Wessid
[[ "$Wessid" ]]
if [ "$Wessid" == "" ]; then
    Wessid=Linux-ADHOC
fi
}

###############################################
### 
set_passkey_fun(){
echo -e ""
echo -e "    $TEXT03:"
echo -e "    ($TEXT04)"
read WPasskey
[[ "$WPasskey" ]]
}

#####################################

# check dnsmasq.conf
check_dnsmasq_fun(){
	if [ -f $dnsmasqPid ]; then
		echo "Dhcp is running!"
		echo "Now, restart Ad-hoc"
		adhoc_stop_fun
		sleep 1
	fi
	if [ ! -d $adhocFolder ]; then
	sudo mkdir $adhocFolder
	fi

	if [ ! -f $dnsmasqFile ]; then
	echo "$dnsmasqFile is not exist, now building."

	echo "dhcp-authoritative" > $dnsmasqFile
	echo "dhcp-range=$DhcpRangeMin,$DhcpRangeMax,12h" >> $dnsmasqFile
	echo "dhcp-leasefile=$dnsmasqLeases" >> $dnsmasqFile
	echo "pid-file=$dnsmasqPid" >> $dnsmasqFile
	echo "user=root" >> $dnsmasqFile
	echo "no-negcache" >> $dnsmasqFile
	fi
}

# start Ad-hoc
adhoc_start_fun(){
	echo "Starting Ad-hoc..."
	check_dnsmasq_fun
	sleep 1
	sudo ifconfig $WInterface down
	sudo ifconfig $WInterface $Igateway netmask $Inetmask
	sleep 1
	
	sudo ifconfig $WInterface up
	sleep 1

	sudo ifconfig $WInterface down
	sudo iwconfig $WInterface mode $Wmode
	sudo ifconfig $WInterface up
	sleep 1
	
	sudo iwconfig $WInterface essid $Wessid
	sleep 1
	
	sudo iwconfig $WInterface channel $Wchannel
	sleep 1

	if [ "$WPasskey" == "" ]; then
		sudo iwconfig $WInterface key off
		sleep 1
	else
		sudo iwconfig $WInterface key restricted
		# sudo iwconfig $WInterface key open
		sleep 1
		sudo iwconfig $WInterface key s:$WPasskey
		sleep 1
	fi	

	echo -n "Setting iptable..."
	sleep 1

	#remove the old rules
	sudo iptables -N wireless-adhoc
  	sudo iptables -F wireless-adhoc
  	sudo iptables -t nat -F PREROUTING
  	sudo iptables -t nat -F POSTROUTING
  	sudo iptables -t nat -F

	#bring up the NAT rules
	sudo iptables -A wireless-adhoc -m state --state ESTABLISHED,RELATED -j ACCEPT
	sudo iptables -A wireless-adhoc -s $Inetwork/24 -j ACCEPT
	sudo iptables -A wireless-adhoc -p 47 -j ACCEPT
	sudo iptables -A wireless-adhoc -j DROP
	sudo iptables -A FORWARD -m state --state INVALID -j DROP
	sudo iptables -A FORWARD -j wireless-adhoc
	sudo iptables -t nat -I POSTROUTING -s $Inetwork/24 -j MASQUERADE
	sleep 1
	sudo sh -c "echo 1 > /proc/sys/net/ipv4/ip_forward"
	sleep 1
	sudo dnsmasq -i $WInterface --resolv-file=$resolvFile --conf-file=$dnsmasqFile
	echo
	echo "Success!^^"
}

# stop Ad-hoc
adhoc_stop_fun(){

	WInterface=$(cat /tmp/WInterface)

	echo "Stopping adhoc ..."
	sudo sh -c "echo 0 > /proc/sys/net/ipv4/ip_forward"
	echo -n "."
	# stop adhoc mode
	sudo ifconfig $WInterface down
	sudo iwconfig $WInterface mode managed
	sudo ifconfig $WInterface up
	sleep 1
	echo -n "."
	sudo iwconfig $WInterface key off
	sleep 1
	echo -n "."
	sudo iwconfig $WInterface essid any
	sleep 1
	echo -n "."
	sudo ifconfig $WInterface down
	sleep 1
	echo -n "."
	# remove iptabled rules
	sudo iptables -D FORWARD -j wireless-adhoc
	sudo iptables -D FORWARD -m state --state INVALID -j DROP
	sudo iptables -F wireless-adhoc
	sudo iptables -X wireless-adhoc
	sudo iptables -t nat -F PREROUTING
	sudo iptables -t nat -F POSTROUTING
	sudo iptables -t nat -F
	sleep 1
	if [ -f $dnsmasqPid ]; then
		dnsmasqID=$(cat $dnsmasqPid)
		sudo kill $dnsmasqID
		sleep 1
	fi
	if [ -f $dnsmasqLeases ]; then 
		sudo rm $dnsmasqLeases
	fi
	echo
	echo "Wifi ad-hoc now stopped"
}

adhoc_restart_fun(){
	echo "Now, resart ad-hoc ..."
	adhoc_stop_fun
	sleep 2
	adhoc_start_fun
}

#####################################

start_fun(){

set_essid_fun
set_passkey_fun
choose_interface_fun
adhoc_start_fun

}

wpe_menu_fun(){
clear
echo -e ""
echo -e "    Create AD-HOC"
echo -e ""
echo -e "    1) $TEXT05 AD-HOC"
if [ -f "/tmp/WInterface" ]; then
    echo -e "    2) $TEXT06 AD-HOC"
fi
echo -e "    0) $TEXT07"

read MENU
[[ "$MENU" ]]

if [ "$MENU" == "1" ]; then
    start_fun
    sudo rm -rf /tmp/iw-dev-info
elif [ "$MENU" == "2" ]; then
    adhoc_stop_fun
    sudo rm -rf /tmp/WInterface
    sudo rm -rf /tmp/iw-dev-info
elif [ "$MENU" == "0" ]; then
    exit
else
    wpe_menu_fun
fi

}

wpe_menu_fun
